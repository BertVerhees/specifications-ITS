FORMAT: 1A
HOST: http://www.openehr.org/api



# OpenEHR REST API

OpenEHR REST API enables interaction with an OpenEHR service via the REST API.




# Group EHR, EHR_STATUS and EHR_ACCESS




## EHR [/ehr/{ehrId}]

Management of EHRs.

### Create a new EHR [POST]

Request body may contain `ehr_status` and `ehr_access` attributes, if provided those
resources will also be created when EHR is created. If they are not provided defaults
will be created.

+ Parameters
    + ehrId (optional, string) - Creates a new EHR with specified ID.

+ Request

    + Headers

            Prefer: return={representation/minimal}
            
    + Body
    
            {
                "commit_audit_description": "text",
                "commit_audit_committer": {"@class": "PARTY_IDENTIFIED", ... },
                "ehr_status": {},
                "ehr_access": {}
            }

+ Response 201 (application/json)

    New EHR has been created. Body is only returned when `Prefer` haeder
    has a value of `return=representation`

    + Headers

            Location: /ehr/{ehrId}

    + Body

            {
                "system_id": {},
                "ehr_id": {},
                "ehr_status": "versioned ehr status uid",
                "ehr_acess": "versioned ehr access uid",
                "directory": {},
                "time_created", "..."
            }

+ Response 400

    Unable to create a new EHR. Can happen when the supplied ehrId already exists.

    + Body

+ Response 401

    Unauthorized.

    + Body


### Get an EHR [GET]

+ Parameters
    + ehrId (string) - ID of the EHR resource

+ Response 200 (application/json)

            {
                "system_id": {},
                "ehr_id": {},
                "ehr_status": "versioned ehr status uid",
                "ehr_acess": "versioned ehr access uid",
                "directory": {},
                "time_created", "...",
                ... // to be defined, possibly counts of compositions, contributions, etc.
            }

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body


### Get an EHR by subject ID [GET /ehr{?subjectId,subjectNamespace}]

+ Parameters
    + subjectId (string) - subject ID
    + subjectNamespace (string) - subject namespace

+ Request

    + Headers

            Prefer: return=representation OR return=minimal

+ Response 200 (application/json)

    Body of the response is only returned when `Prefer` header has a value of
    `return=representation` otherwise only headers are returned.

    + Headers

            Content-Location: /ehr/{ehrId}
            
    + Body

            {
                "system_id": {},
                "ehr_id": {},
                "ehr_status": "versioned ehr status uid",
                "ehr_acess": "versioned ehr access uid",
                "directory": {},
                "time_created", "...",
                ... // to be defined, possibly counts of compositions, contributions, etc.
            }

+ Response 204

    No content - no EHR with given parameters found.

    + Body

+ Response 400

    Bad request: one of the parameters is missing.

    + Body

+ Response 401

    Unauthorized.

    + Body


### Delete an EHR [DELETE /ehr/{ehrId}]

_This call is under discussion._

+ Parameters
    + ehrId (string) - ID of the EHR to delete.

+ Response 204

    EHR was deleted.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given EHR id.

    + Body


### Get EHR_STATUS [GET /ehr/{ehrId}/ehr_status/{versionUid}{?versionTime}]

When parameters `versionUid` and `versionTime` are not present then the latest version is returned.
When `versionUid` parameter is present, parameter `versionTime` is ignored returning the version
specified. 
Parameter `versionTime` can have the following values:
- a specific timestamp in the full ISO8601 format
- `LATEST_TRUNK_VERSION`
- contribution uid

+ Parameters
    + ehrId (string) - ID of the EHR resource
    + versionUid (string, optional) - versionUid
    + versionTime (string, optional) - parameter identifying a specific version

+ Response 200 (application/json)

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_status/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "subject": {},
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {}
            }


+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body

### Update an EHR_STATUS [PUT /ehr/{ehrId}/ehr_status]

+ Parameters
    + ehrId (string) - ID of the EHR resource

+ Request (application/json)

    + Header

            Match-If: {precedingVersionUid}

    + Body

            {
                "subject": {},
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {}
            }

+ Response 204

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_status/{versionUid}
            ETag: {versionUid}

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_status/{versionUid}
            ETag: {versionUid}

    + Body



### Get EHR_ACCESS [GET /ehr/{ehrId}/ehr_access/{versionUid}{?versionTime}]

When parameters `versionUid` and `versionTime` are not present then the latest version is returned.
When `versionUid` parameter is present, parameter `versionTime` is ignored returning the version
specified. 
Parameter `versionTime` can have the following values:
- a specific timestamp in the full ISO8601 format
- `LATEST_TRUNK_VERSION`
- contribution uid

+ Parameters
    + ehrId (string) - ID of the EHR resource
    + versionUid (string, optional) - versionUid
    + versionTime (string, optional) - parameter identifying a specific version

+ Response 200 (application/json)

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_access/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "settings": {}
            }


+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body

### Update an EHR_ACCESS [PUT /ehr/{ehrId}/ehr_access]

+ Parameters
    + ehrId (string) - ID of the EHR resource

+ Request (application/json)

    + Header

            Match-If: {precedingVersionUid}

    + Body

            {
                "settings": {}
            }

+ Response 204

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_access/{versionUid}
            ETag: {versionUid}

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_access/{versionUid}
            ETag: {versionUid}

    + Body



## EHR_STATUS [/ehr_status]

### Get EHR_STATUS directly [GET /ehr_status/{objectId}{?versionTime}]

Parameter `objectId` can hold a VERSIONED_OBJECT id in which case the
latest version of the EHR_STATUS is returned.
It can also hold a `versionUid` in which case the specific version is returned.

+ Parameters
    + objectId (string) - VERSIONED\_OBJECT id or version UID of the EHR_STATUS
    + versionTime (string, optional) - parameter identifying a specific version

+ Response 200 (application/json)

    + Headers

            Content-Location: /ehr_status/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "subject": {},
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {}
            }


+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR_STATUS with the given id.

    + Body

### Update EHR_STATUS directly [PUT /ehr_status/{objectId}]

+ Parameters
    + objectId (string)

+ Request (application/json)

    + Header

            Match-If: {precedingVersionUid}

    + Body

            {
                "subject": {},
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {}
            }

+ Response 204

    + Headers

            Content-Location: /ehr_status/{versionUid}
            ETag: {versionUid}

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR_STATUS with the given id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_status/{versionUid}
            ETag: {versionUid}

    + Body


## EHR_ACCESS [/ehr_access]

### Get EHR_ACCESS directly [GET /ehr_access/{objectId}{?versionTime}]

Parameter `objectId` can hold a VERSIONED_OBJECT id in which case the
latest version of the EHR_ACCESS is returned.
It can also hold a `versionUid` in which case the specific version is returned.

+ Parameters
    + objectId (string) - VERSIONED\_OBJECT id or version UID of the EHR_ACCESS
    + versionTime (string, optional) - parameter identifying a specific version

+ Response 200 (application/json)

    + Headers

            Content-Location: /ehr_access/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "settings": {}
            }


+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR_ACCESS with the given id.

    + Body

### Update EHR_ACCESS directly [PUT /ehr_access/{objectId}]

+ Parameters
    + objectId (string)

+ Request (application/json)

    + Header

            Match-If: {precedingVersionUid}

    + Body

            {
                "settings": {}
            }

+ Response 204

    + Headers

            Content-Location: /ehr_access/{versionUid}
            ETag: {versionUid}

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR_ACCESS with the given id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_access/{versionUid}
            ETag: {versionUid}

    + Body


# Group DIRECTORY

## Directory [/ehr/{ehrId}/directory]

### Create a directory [POST /ehr/{ehrId}/directory]

+ Parameters

    + ehrId (string) - EHR id

+ Request

    + Body (application/json)

            {
                "items": [...],
                "folders": [{}]
            }

    + Headers

            Prefer: return={representation,minimal}

+ Response 201 (application/json)

    New directory was created. Content body is only returned when
    `Prefer` header has `return=representation` otherwise only headers are
    returned.
    
    + Headers

            Location: /ehr/{ehrId}/directory/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "items": [...],
                "folders": [{}]
            }

+ Response 400

    Bad request - error creating a directory.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body


### Update a directory [PUT /ehr/{ehrId}/directory]

+ Parameters

    + ehrId (string) - EHR id

+ Request

    + Body (application/json)

            {
                "items": [...],
                "folders": [{}]
            }

    + Headers

            Match-If: {precedingVersionUid}
            Prefer: return={representation,minimal}

+ Response 200 (application/json)

    Directory was updated. This is the response when `Prefer` header has `return=representation`.
    
    + Headers

            Location: /ehr/{ehrId}/directory/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "items": [...],
                "folders": [{}]
            }

+ Response 204

    Directory was updated. This is the response when `Prefer` header is missing 
    or its value is not `return=representation`.
    
    + Headers

            Location: /ehr/{ehrId}/directory/{versionUid}
            ETag: {versionUid}

+ Response 400

    Bad request - error creating a directory.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/directory/{versionUid}
            ETag: {versionUid}

    + Body


### Delete a directory [DELETE /ehr/{ehrId}/directory]

+ Parameters

    + ehrId (string) - EHR id

+ Request

    + Headers

            Match-If: {precedingVersionUid}

+ Response 204

    Directory was deleted.
    
    + Body

+ Response 400

    Bad request - error deleting directory.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/directory/{versionUid}
            ETag: {versionUid}

    + Body

### Get a directory [GET /ehr/{ehrId}/directory/{versionUid}{?versionTime,path}]

+ Parameters
    
    + ehrId (string) - EHR id
    + versionUid (string, optional) - specific version
    + versionTime (string, optional) - parameter identifying a specific version
    + path (string, optional) - path to a sub-folder

+ Response 200 (application/json)

    + Headers

            Location: /ehr/{ehrId}/directory/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "items": [...],
                "folders": [{}]
            }

+ Response 204

    EHR has no directory or no folder at provided path.

    + Headers

            Location: /ehr/{ehrId}/directory/{versionUid}
            ETag: {versionUid}

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body


# Group COMPOSITION

## Composition [/ehr/{ehrId}/compositions]

### Create a new composition [POST /ehr/{ehrId}/compositions/{objectId}{?format}]

+ Parameters

    + ehrId (string) - EHR id
    + objectId (string, optional) - to be able to create a new composition with the given object id
    + format (string, optional) - optional format of the composition supplied (when ommitted canonical openEHR
    is assumed)

+ Request

    + Body (application/json)

            {
                "@class": "COMPOSITION",
                "name": {
                    "@class": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            Prefer: return={representation,minimal}

+ Response 201

    New composition was created. Content body is only returned when
    `Prefer` header has `return=representation` otherwise only headers are
    returned.
    
    + Headers

            Location: /ehr/{ehrId}/compositions/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "@class": "COMPOSITION",
                "name": {
                    "@class": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 400

    Bad request: composition validation errors.

    + Body

            {
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body

### Update a composition [PUT /ehr/{ehrId}/compositions/{objectId}{?format}]

+ Parameters

    + ehrId (string) - EHR id
    + objectId (string) - object id of the composition to update
    + format (string, optional) - optional format of the composition supplied (when ommitted canonical openEHR
    is assumed)

+ Request

    + Body (application/json)

            {
                "@class": "COMPOSITION",
                "name": {
                    "@class": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            Match-If: {precedingVersionUid}
            Prefer: return={representation,minimal}

+ Response 200 (application/json)
    
    This is the response we get when `Prefer` header was `return=representation`.

    + Headers

            Content-Location: /ehr/{ehrId}/compositions/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "@class": "COMPOSITION",
                "name": {
                    "@class": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 204

    This is the response we get when no `Prefer` header was sent or `Prefer` header 
    was `return=representation`.

    + Headers

            Content-Location: /ehr/{ehrId}/compositions/{versionUid}
            ETag: {versionUid}

+ Response 400

    Bad request: composition validation errors.

    + Body

            {
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id or no composition with the given object id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_status/{versionUid}
            ETag: {versionUid}

    + Body

### Delete a composition [DELETE /ehr/{ehrId}/compositions/{objectId}]

+ Parameters

    + ehrId (string) - EHR id
    + objectId (string) - object id of the composition to delete

+ Request

    + Headers

            Match-If: {precedingVersionUid}

+ Response 204
    
    Composition was deleted.

    + Headers

            Content-Location: /ehr/{ehrId}/compositions/{versionUid}
            ETag: {versionUid}

    + Body

+ Response 400

    Bad request.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id or no composition with the given object id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/compositions/{versionUid}
            ETag: {versionUid}

    + Body

### Update a composition directly [PUT /compositions/{objectId}{?format}]

+ Parameters

    + objectId (string) - object id of the composition to update
    + format (string, optional) - optional format of the composition supplied (when ommitted canonical openEHR
    is assumed)

+ Request

    + Body (application/json)

            {
                "@class": "COMPOSITION",
                "name": {
                    "@class": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

    + Headers

            Match-If: {precedingVersionUid}
            Prefer: return={representation,minimal}

+ Response 200 (application/json)
    
    This is the response we get when `Prefer` header was `return=representation`.

    + Headers

            Content-Location: /ehr/{ehrId}/compositions/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "@class": "COMPOSITION",
                "name": {
                    "@class": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 204

    This is the response we get when no `Prefer` header was sent or `Prefer` header 
    was `return=representation`.

    + Headers

            Content-Location: /ehr/{ehrId}/compositions/{versionUid}
            ETag: {versionUid}

+ Response 400 (application/json)

    Bad request: composition validation errors.

    + Body

            {
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id or no composition with the given object id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/ehr_status/{versionUid}
            ETag: {versionUid}

    + Body


### Delete a composition directly [DELETE /compositions/{objectId}]

+ Parameters

    + objectId (string) - object id of the composition to delete

+ Request

    + Headers

            Match-If: {precedingVersionUid}

+ Response 204
    
    Composition was deleted.

    + Headers

            Content-Location: /compositions/{versionUid}
            ETag: {versionUid}

    + Body

+ Response 400

    Bad request.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id or no composition with the given object id.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /compositions/{versionUid}
            ETag: {versionUid}

    + Body


### Get a composition directly [GET /compositions/{objectId}]

+ Parameters

    + objectId (string) - object id of the composition. This can be
    a versioned object id or a versionUid.

+ Response 200 (application/json)

    + Headers

            Content-Location: /compositions/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "@class": "COMPOSITION",
                "name": {
                    "@class": "DV_TEXT",
                    "value": "Vital Signs"
                },
                ...
            }

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No composition with the given object id.

    + Body

## Versioned Composition [/ehr/{ehrId}/versioned_compositions]

### Create a new versioned composition [POST /ehr/{ehrId}/versioned_compositions/{uid}]

+ Parameters

    + ehrId (string) - EHR id
    + uid (string, optional) - supplied to create a new VERSIONED_COMPOSITION with the given uid

+ Request

    + Headers

            Prefer: return={representation,minimal}

+ Response 201 (application/json)

    New versioned composition was created. Content body is only returned when
    `Prefer` header has `return=representation` otherwise only headers are
    returned.
    
    + Headers

            Location: /ehr/{ehrId}/versioned_compositions/{uid}

    + Body

            {
                "uid": "xxx",
                "owner_id": "ehrId",
                "time_created": "ISO8601 timestamp"
            }

+ Response 400

    Bad request - when VERSIONED_COMPOSITION with the given uid already exists.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body


### Get a versioned composition [GET /ehr/{ehrId}/versioned_compositions/{uid}]

Gets a complete VERSIONED_COMPOSITION.

+ Parameters

    + ehrId (string) - EHR id
    + uid (string) - VERSIONED_COMPOSITION's uid

+ Request

    + Headers

            Prefer: return={representation,minimal}

+ Response 200 (application/json)

    + Headers

            Location: /ehr/{ehrId}/versioned_compositions/{uid}

    + Body

            {
                "uid": "xxx",
                "owner_id": "ehrId",
                "time_created": "ISO8601 timestamp",
                "version_count: 12,
                "all_version_ids": [
                    "versionedUid1",
                    "versionedUid2",
                    ...
                ]
            }

+ Response 400

    Bad request - when VERSIONED_COMPOSITION with the given uid already exists.

    + Body

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id.

    + Body


### Create a new composition version [POST /ehr/{ehrId}/versioned_compositions/{uid}/version{?format}]

+ Parameters

    + ehrId (string) - EHR id
    + uid (string) - VERSIONED_COMPOSITION's uid
    + format (string, optional) - optional format of the composition (when ommitted canonical openEHR
    is assumed)

+ Request

    + Body (application/json)

            {
                "commit_audit": {},
                "data": {
                    "@class": "COMPOSITION",
                    "name": {
                        "@class": "DV_TEXT",
                        "value": "Vital Signs"
                    }
                    ...
                }
            }

    + Headers

            Match-If: {precedingVersionUid}
            Prefer: return={representation,minimal}

+ Response 201 (application/json)

    New composition version was created. Content body is only returned when
    `Prefer` header was set to `return=representation` otherwise only headers are
    returned.
    
    + Headers

            Location: /ehr/{ehrId}/versioned_compositions/{uid}/version/{versionUid}
            ETag: {versionUid}

    + Body

            {
                "contribution": {},
                "signature": "...",
                "commit_audit": {},
                "data": {
                    "@class": "COMPOSITION",
                    "name": {
                        "@class": "DV_TEXT",
                        "value": "Vital Signs"
                    }
                    ...
                }
            }

+ Response 400

    Bad request: composition validation errors.

    + Body

            {
                "message": "Error message",
                "validationErrors": [
                    "error1", "error2"
                ]
            }

+ Response 401

    Unauthorized.

    + Body

+ Response 404

    No EHR with the given id or no VERSIONED_COMPOSITION with uid.

    + Body

+ Response 412

    Match-If header doesn't match the last version. Returns
    last version in the content-location and ETag headers.

    + Headers

            Content-Location: /ehr/{ehrId}/versioned_compositions/{uid}/version/{versionUid}
            ETag: {versionUid}

    + Body


# Group QUERY

## Querying [/query]

### Get query results [POST /query/aql]

Execute an AQL query.

NOTE: we might add a header to indicate which EHR to execute against to
allow systems that need to route based of EHR id to do so without having
to analyze the request body.

+ Request (application/json)

    + Body
    
            {
                "aql": "SELECT ....",
                "aqlParameters": {
                    "parameter-name": "parameter-value",...
                },
                "offset": 999,
                "fetch": 888,
                // possibly more, TBD
            }
        
+ Response 200

        {
            "metaData": {
                "hits": 199,
                ...
            },
            "resultSet": [
                {
                    "unit": "°C",
                    "temperature": 38.8
                },
                {
                    "unit": "°C",
                    "temperature": 38.8
                },
                {
                    "unit": "°C",
                    "temperature": 38.8
                }
            ],
            "executedAql": "aql with replaced parameters",
        }
        
